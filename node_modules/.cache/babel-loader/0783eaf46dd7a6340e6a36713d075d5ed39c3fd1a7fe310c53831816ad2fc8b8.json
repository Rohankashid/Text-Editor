{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Text-Editor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [elements, setElements] = useState([]);\n  const [selectedElement, setSelectedElement] = useState(null);\n  const addTextElement = () => {\n    const newElement = {\n      id: Date.now(),\n      text: \"Double-click to edit\",\n      x: 100,\n      y: 100,\n      fontSize: 16,\n      fontStyle: \"normal\",\n      fontWeight: \"normal\",\n      fontFamily: \"Arial\",\n      width: 150,\n      // Initial width\n      height: 30,\n      // Initial height\n      textHistory: [{\n        text: \"Double-click to edit\",\n        fontSize: 16,\n        fontFamily: \"Arial\",\n        fontStyle: \"normal\",\n        fontWeight: \"normal\"\n      }],\n      historyIndex: 0\n    };\n    setElements([...elements, newElement]);\n  };\n  const updateElement = (id, newProps) => {\n    setElements(prevElements => prevElements.map(el => el.id === id ? {\n      ...el,\n      ...newProps\n    } : el));\n  };\n  const handleDrag = (id, e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.width / 2;\n    const y = e.clientY - rect.height / 2;\n    updateElement(id, {\n      x,\n      y\n    });\n  };\n  const handleTextChange = (id, e) => {\n    const textElement = e.target;\n    const newText = textElement.innerText;\n\n    // Calculate the size of the content\n    const contentWidth = textElement.scrollWidth + 10; // Add padding\n    const contentHeight = textElement.scrollHeight + 10;\n    setElements(prevElements => prevElements.map(el => {\n      if (el.id === id) {\n        // Only update width/height if content overflows\n        const newWidth = contentWidth > el.width ? contentWidth : el.width;\n        const newHeight = contentHeight > el.height ? contentHeight : el.height;\n        const newHistory = [...el.textHistory.slice(0, el.historyIndex + 1), {\n          text: newText,\n          fontSize: el.fontSize,\n          fontFamily: el.fontFamily,\n          fontStyle: el.fontStyle,\n          fontWeight: el.fontWeight\n        }];\n        return {\n          ...el,\n          text: newText,\n          width: newWidth,\n          // Update only if content overflows\n          height: newHeight,\n          // Update only if content overflows\n          textHistory: newHistory,\n          historyIndex: newHistory.length - 1\n        };\n      }\n      return el;\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTextElement,\n        children: \"Add Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas\",\n      children: elements.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `text-element ${selectedElement === el.id ? \"editing\" : \"\"}`,\n        style: {\n          position: \"absolute\",\n          left: el.x,\n          top: el.y,\n          fontSize: el.fontSize,\n          fontStyle: el.fontStyle,\n          fontWeight: el.fontWeight,\n          fontFamily: el.fontFamily,\n          width: `${el.width}px`,\n          height: `${el.height}px`,\n          minWidth: \"150px\",\n          minHeight: \"30px\",\n          wordWrap: \"break-word\",\n          overflow: \"hidden\"\n        },\n        draggable: true,\n        onDragStart: e => e.dataTransfer.setData(\"text/plain\", el.id),\n        onDragEnd: e => handleDrag(el.id, e),\n        onDoubleClick: () => setSelectedElement(el.id),\n        onBlur: () => setSelectedElement(null),\n        contentEditable: selectedElement === el.id,\n        onInput: e => handleTextChange(el.id, e),\n        children: el.text\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"onkilFoSOLJA59wuwAU73BaVkVY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","elements","setElements","selectedElement","setSelectedElement","addTextElement","newElement","id","Date","now","text","x","y","fontSize","fontStyle","fontWeight","fontFamily","width","height","textHistory","historyIndex","updateElement","newProps","prevElements","map","el","handleDrag","e","rect","target","getBoundingClientRect","clientX","clientY","handleTextChange","textElement","newText","innerText","contentWidth","scrollWidth","contentHeight","scrollHeight","newWidth","newHeight","newHistory","slice","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","position","left","top","minWidth","minHeight","wordWrap","overflow","draggable","onDragStart","dataTransfer","setData","onDragEnd","onDoubleClick","onBlur","contentEditable","onInput","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Text-Editor/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  const [elements, setElements] = useState([]);\r\n  const [selectedElement, setSelectedElement] = useState(null);\r\n\r\n  const addTextElement = () => {\r\n    const newElement = {\r\n      id: Date.now(),\r\n      text: \"Double-click to edit\",\r\n      x: 100,\r\n      y: 100,\r\n      fontSize: 16,\r\n      fontStyle: \"normal\",\r\n      fontWeight: \"normal\",\r\n      fontFamily: \"Arial\",\r\n      width: 150, // Initial width\r\n      height: 30, // Initial height\r\n      textHistory: [\r\n        { text: \"Double-click to edit\", fontSize: 16, fontFamily: \"Arial\", fontStyle: \"normal\", fontWeight: \"normal\" }\r\n      ],\r\n      historyIndex: 0,\r\n    };\r\n    setElements([...elements, newElement]);\r\n  };\r\n\r\n  const updateElement = (id, newProps) => {\r\n    setElements((prevElements) =>\r\n      prevElements.map((el) =>\r\n        el.id === id ? { ...el, ...newProps } : el\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDrag = (id, e) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - rect.width / 2;\r\n    const y = e.clientY - rect.height / 2;\r\n    updateElement(id, { x, y });\r\n  };\r\n\r\n  const handleTextChange = (id, e) => {\r\n    const textElement = e.target;\r\n    const newText = textElement.innerText;\r\n\r\n    // Calculate the size of the content\r\n    const contentWidth = textElement.scrollWidth + 10; // Add padding\r\n    const contentHeight = textElement.scrollHeight + 10;\r\n\r\n    setElements((prevElements) =>\r\n      prevElements.map((el) => {\r\n        if (el.id === id) {\r\n          // Only update width/height if content overflows\r\n          const newWidth = contentWidth > el.width ? contentWidth : el.width;\r\n          const newHeight = contentHeight > el.height ? contentHeight : el.height;\r\n\r\n          const newHistory = [\r\n            ...el.textHistory.slice(0, el.historyIndex + 1),\r\n            {\r\n              text: newText,\r\n              fontSize: el.fontSize,\r\n              fontFamily: el.fontFamily,\r\n              fontStyle: el.fontStyle,\r\n              fontWeight: el.fontWeight,\r\n            }\r\n          ];\r\n          return {\r\n            ...el,\r\n            text: newText,\r\n            width: newWidth, // Update only if content overflows\r\n            height: newHeight, // Update only if content overflows\r\n            textHistory: newHistory,\r\n            historyIndex: newHistory.length - 1,\r\n          };\r\n        }\r\n        return el;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor\">\r\n      <div className=\"toolbar\">\r\n        <button onClick={addTextElement}>Add Text</button>\r\n      </div>\r\n      <div className=\"canvas\">\r\n        {elements.map((el) => (\r\n          <div\r\n            key={el.id}\r\n            className={`text-element ${\r\n              selectedElement === el.id ? \"editing\" : \"\"\r\n            }`}\r\n            style={{\r\n              position: \"absolute\",\r\n              left: el.x,\r\n              top: el.y,\r\n              fontSize: el.fontSize,\r\n              fontStyle: el.fontStyle,\r\n              fontWeight: el.fontWeight,\r\n              fontFamily: el.fontFamily,\r\n              width: `${el.width}px`,\r\n              height: `${el.height}px`,\r\n              minWidth: \"150px\",\r\n              minHeight: \"30px\",\r\n              wordWrap: \"break-word\",\r\n              overflow: \"hidden\",\r\n            }}\r\n            draggable\r\n            onDragStart={(e) => e.dataTransfer.setData(\"text/plain\", el.id)}\r\n            onDragEnd={(e) => handleDrag(el.id, e)}\r\n            onDoubleClick={() => setSelectedElement(el.id)}\r\n            onBlur={() => setSelectedElement(null)}\r\n            contentEditable={selectedElement === el.id}\r\n            onInput={(e) => handleTextChange(el.id, e)}\r\n          >\r\n            {el.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}