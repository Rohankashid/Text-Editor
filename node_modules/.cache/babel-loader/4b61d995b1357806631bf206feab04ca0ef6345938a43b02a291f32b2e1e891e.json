{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\text-editor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [elements, setElements] = useState([{\n    id: Date.now(),\n    text: \"Double-click to edit\",\n    x: 100,\n    y: 50,\n    // Start higher up\n    fontSize: 16,\n    fontFamily: \"Arial\",\n    contentEditable: false\n  }]);\n  const [selectedElement, setSelectedElement] = useState(null);\n  const [history, setHistory] = useState([]); // To keep track of undo/redo\n  const [redoHistory, setRedoHistory] = useState([]); // To keep redo changes\n\n  // Toggle contentEditable on double-click\n  const handleDoubleClick = id => {\n    const updatedElements = elements.map(el => el.id === id ? {\n      ...el,\n      contentEditable: true\n    } : el);\n    setElements(updatedElements);\n    setSelectedElement(id); // Mark the element as selected\n  };\n\n  // Handle text change while editing\n  const handleTextChange = (id, e) => {\n    const updatedElements = elements.map(el => el.id === id ? {\n      ...el,\n      text: e.target.innerText\n    } : el);\n    setElements(updatedElements);\n    saveToHistory(updatedElements); // Save changes to history\n  };\n\n  // Save to history for undo/redo functionality\n  const saveToHistory = newState => {\n    setHistory([...history, newState]); // Add to history stack\n    setRedoHistory([]); // Clear redo history after a new change\n  };\n\n  // Undo the last action\n  const handleUndo = () => {\n    if (history.length > 0) {\n      const lastState = history[history.length - 1]; // Get the last state\n      setRedoHistory([elements, ...redoHistory]); // Save the current state to redo history\n      setElements(lastState); // Revert to the last state in history\n      setHistory(history.slice(0, history.length - 1)); // Remove last state from history\n    }\n  };\n\n  // Redo the last undone action\n  const handleRedo = () => {\n    if (redoHistory.length > 0) {\n      const lastRedoState = redoHistory[0]; // Get the first state from redo history\n      setHistory([...history, elements]); // Save the current state to history\n      setElements(lastRedoState); // Revert to the last undone state\n      setRedoHistory(redoHistory.slice(1)); // Remove the last state from redo history\n    }\n  };\n\n  // Change the font size of selected element\n  const handleFontSizeChange = e => {\n    const newSize = e.target.value;\n    const updatedElements = elements.map(el => el.id === selectedElement ? {\n      ...el,\n      fontSize: newSize\n    } : el);\n    setElements(updatedElements);\n    saveToHistory(updatedElements); // Save changes to history\n  };\n\n  // Change the font family of selected element\n  const handleFontFamilyChange = e => {\n    const newFont = e.target.value;\n    const updatedElements = elements.map(el => el.id === selectedElement ? {\n      ...el,\n      fontFamily: newFont\n    } : el);\n    setElements(updatedElements);\n    saveToHistory(updatedElements); // Save changes to history\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUndo,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRedo,\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleFontSizeChange,\n        defaultValue: 16,\n        children: [12, 14, 16, 18, 20, 24, 28].map(size => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: size,\n          children: size\n        }, size, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleFontFamilyChange,\n        defaultValue: \"Arial\",\n        children: [\"Arial\", \"Courier New\", \"Georgia\", \"Times New Roman\", \"Verdana\"].map(font => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: font,\n          children: font\n        }, font, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas\",\n      children: elements.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-element\",\n        style: {\n          position: \"absolute\",\n          left: el.x,\n          top: el.y,\n          fontSize: `${el.fontSize}px`,\n          fontFamily: el.fontFamily,\n          whiteSpace: \"nowrap\",\n          overflow: \"hidden\"\n        },\n        draggable: true,\n        contentEditable: el.contentEditable,\n        onDoubleClick: () => handleDoubleClick(el.id),\n        onBlur: () => {\n          const updatedElements = elements.map(elem => elem.id === el.id ? {\n            ...elem,\n            contentEditable: false\n          } : elem);\n          setElements(updatedElements);\n          setSelectedElement(null); // Deselect after editing\n        },\n        onInput: e => handleTextChange(el.id, e),\n        children: el.text\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qdrP2+OkJi+vN9bDipNf0e/64F8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","elements","setElements","id","Date","now","text","x","y","fontSize","fontFamily","contentEditable","selectedElement","setSelectedElement","history","setHistory","redoHistory","setRedoHistory","handleDoubleClick","updatedElements","map","el","handleTextChange","e","target","innerText","saveToHistory","newState","handleUndo","length","lastState","slice","handleRedo","lastRedoState","handleFontSizeChange","newSize","value","handleFontFamilyChange","newFont","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","defaultValue","size","font","style","position","left","top","whiteSpace","overflow","draggable","onDoubleClick","onBlur","elem","onInput","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/text-editor/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  const [elements, setElements] = useState([\r\n    {\r\n      id: Date.now(),\r\n      text: \"Double-click to edit\",\r\n      x: 100,\r\n      y: 50, // Start higher up\r\n      fontSize: 16,\r\n      fontFamily: \"Arial\",\r\n      contentEditable: false,\r\n    }\r\n  ]);\r\n  const [selectedElement, setSelectedElement] = useState(null);\r\n  const [history, setHistory] = useState([]);  // To keep track of undo/redo\r\n  const [redoHistory, setRedoHistory] = useState([]);  // To keep redo changes\r\n\r\n  // Toggle contentEditable on double-click\r\n  const handleDoubleClick = (id) => {\r\n    const updatedElements = elements.map((el) =>\r\n      el.id === id ? { ...el, contentEditable: true } : el\r\n    );\r\n    setElements(updatedElements);\r\n    setSelectedElement(id);  // Mark the element as selected\r\n  };\r\n\r\n  // Handle text change while editing\r\n  const handleTextChange = (id, e) => {\r\n    const updatedElements = elements.map((el) =>\r\n      el.id === id ? { ...el, text: e.target.innerText } : el\r\n    );\r\n    setElements(updatedElements);\r\n    saveToHistory(updatedElements); // Save changes to history\r\n  };\r\n\r\n  // Save to history for undo/redo functionality\r\n  const saveToHistory = (newState) => {\r\n    setHistory([...history, newState]);  // Add to history stack\r\n    setRedoHistory([]);  // Clear redo history after a new change\r\n  };\r\n\r\n  // Undo the last action\r\n  const handleUndo = () => {\r\n    if (history.length > 0) {\r\n      const lastState = history[history.length - 1];  // Get the last state\r\n      setRedoHistory([elements, ...redoHistory]);  // Save the current state to redo history\r\n      setElements(lastState);  // Revert to the last state in history\r\n      setHistory(history.slice(0, history.length - 1));  // Remove last state from history\r\n    }\r\n  };\r\n\r\n  // Redo the last undone action\r\n  const handleRedo = () => {\r\n    if (redoHistory.length > 0) {\r\n      const lastRedoState = redoHistory[0];  // Get the first state from redo history\r\n      setHistory([...history, elements]);  // Save the current state to history\r\n      setElements(lastRedoState);  // Revert to the last undone state\r\n      setRedoHistory(redoHistory.slice(1));  // Remove the last state from redo history\r\n    }\r\n  };\r\n\r\n  // Change the font size of selected element\r\n  const handleFontSizeChange = (e) => {\r\n    const newSize = e.target.value;\r\n    const updatedElements = elements.map((el) =>\r\n      el.id === selectedElement ? { ...el, fontSize: newSize } : el\r\n    );\r\n    setElements(updatedElements);\r\n    saveToHistory(updatedElements);  // Save changes to history\r\n  };\r\n\r\n  // Change the font family of selected element\r\n  const handleFontFamilyChange = (e) => {\r\n    const newFont = e.target.value;\r\n    const updatedElements = elements.map((el) =>\r\n      el.id === selectedElement ? { ...el, fontFamily: newFont } : el\r\n    );\r\n    setElements(updatedElements);\r\n    saveToHistory(updatedElements);  // Save changes to history\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor\">\r\n      {/* Controls for font size, family, undo/redo */}\r\n      <div className=\"controls\">\r\n        <button onClick={handleUndo}>Undo</button>\r\n        <button onClick={handleRedo}>Redo</button>\r\n        <select onChange={handleFontSizeChange} defaultValue={16}>\r\n          {[12, 14, 16, 18, 20, 24, 28].map((size) => (\r\n            <option key={size} value={size}>{size}</option>\r\n          ))}\r\n        </select>\r\n        <select onChange={handleFontFamilyChange} defaultValue=\"Arial\">\r\n          {[\"Arial\", \"Courier New\", \"Georgia\", \"Times New Roman\", \"Verdana\"].map((font) => (\r\n            <option key={font} value={font}>{font}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Canvas area */}\r\n      <div className=\"canvas\">\r\n        {elements.map((el) => (\r\n          <div\r\n            key={el.id}\r\n            className=\"text-element\"\r\n            style={{\r\n              position: \"absolute\",\r\n              left: el.x,\r\n              top: el.y,\r\n              fontSize: `${el.fontSize}px`,\r\n              fontFamily: el.fontFamily,\r\n              whiteSpace: \"nowrap\",\r\n              overflow: \"hidden\",\r\n            }}\r\n            draggable\r\n            contentEditable={el.contentEditable}\r\n            onDoubleClick={() => handleDoubleClick(el.id)}\r\n            onBlur={() => {\r\n              const updatedElements = elements.map((elem) =>\r\n                elem.id === el.id ? { ...elem, contentEditable: false } : elem\r\n              );\r\n              setElements(updatedElements);\r\n              setSelectedElement(null); // Deselect after editing\r\n            }}\r\n            onInput={(e) => handleTextChange(el.id, e)}\r\n          >\r\n            {el.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}